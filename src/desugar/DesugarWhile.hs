-- automatically generated by BNF Converter
module Main where


import System.IO ( stdin, hGetContents )
import System.Environment ( getArgs, getProgName )
import System.Exit ( exitFailure, exitSuccess )

import LexWhile
import ParWhile
import PrintWhile
import AbsWhile
import LayoutWhile
import TransNumberWhile
import TransPCallWhile
import TransAndWhile(transAnd)
import TransCaseWhile(transCase)

import ErrM

type ParseFun a = [Token] -> Err a

myLLexer = resolveLayout True . myLexer

type Verbosity = Int

putStrV :: Verbosity -> String -> IO ()
putStrV v s = if v > 1 then putStrLn s else return ()

-- runFile :: (Print a, Show a, Trans a) => Verbosity -> ParseFun a -> FilePath -> IO ()
runFile v p f = -- putStrLn f >> 
  readFile f >>= run v p

-- run :: (Print a, Show a, Trans a) => Verbosity -> ParseFun a -> String -> IO ()
run v p s = let ts = myLLexer s in case p ts of
           Bad s    -> do putStrLn "\nParse              Failed...\n"
                          putStrV v "Tokens:"
                          putStrV v $ show ts
                          putStrLn s
                          exitFailure
           Ok  tree -> do -- putStrLn "\nParse Successful!"
                          -- showTree v tree
                          putStrV v $ printTree $
                            transNumber $ expandIfProgram $ extractMain $ doInline $ transAnd $ transCase tree

                          exitSuccess

-- 名前無しプロシージャを取り出す
extractMain :: Program -> Program
extractMain (Prog procs) = Prog (filter f procs)
  where f (AProc pNameOp _ _ _) = case pNameOp of
          Name ident -> False
          NoName -> True

showTree :: (Show a, Print a) => Int -> a -> IO ()
showTree v tree
 = do
      putStrV v $ "\n[Abstract Syntax]\n\n" ++ show tree
      putStrV v $ "\n[Linearized tree]\n\n" ++ printTree tree

usage :: IO ()
usage = do
  putStrLn $ unlines
    [ "usage: Call with one of the following argument combinations:"
    , "  --help          Display this help message."
    , "  (no arguments)  Parse stdin verbosely."
    , "  (files)         Parse content of files verbosely."
    , "  -s (files)      Silent mode. Parse content of files silently."
    ]
  exitFailure

main :: IO ()
main = do
  args <- getArgs
  case args of
    ["--help"] -> usage
    [] -> hGetContents stdin >>= run 2 pProgram
    "-s":fs -> mapM_ (runFile 0 pProgram) fs
    fs -> mapM_ (runFile 2 pProgram) fs
